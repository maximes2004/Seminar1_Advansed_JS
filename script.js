// Задание 1
// • Используя Symbol.iterator, создайте объект "Музыкальная коллекция", который можно итерировать. Каждая итерация должна возвращать следующий альбом из коллекции.

// • Создайте объект musicCollection, который содержит массив альбомов и имеет свойство-символ Symbol.iterator. Каждый альбом имеет следующую структуру:

// {
// title: "Название альбома",
// artist: "Исполнитель",
// year: "Год выпуска"
// }

// • Реализуйте кастомный итератор для объекта musicCollection. Итератор должен перебирать альбомы по порядку.
// • Используйте цикл for...of для перебора альбомов в музыкальной коллекции и вывода их на консоль в формате: Название альбома - Исполнитель (Год выпуска)

// // Определяем объект musicCollection, который будет содержать массив альбомов
// const musicCollection = {
//   albums: [
//     { title: "The Dark Side of the Moon", artist: "Pink Floyd", year: 1973 },
//     { title: "Back in Black", artist: "AC/DC", year: 1980 },
//     { title: "Thriller", artist: "Michael Jackson", year: 1982 },
//     { title: "The Wall", artist: "Pink Floyd", year: 1979 },
//     { title: "Hotel California", artist: "Eagles", year: 1976 },
//   ],

//   // Используем Symbol.iterator для создания кастомного итератора
//   [Symbol.iterator]() {
//     // Устанавливаем текущий индекс для отслеживания текущей позиции в массиве
//     let currentIndex = 0;
//     // Сохраняем ссылку на массив альбомов
//     const albums = this.albums;

//     // Возвращаем объект итератора
//     return {
//       // Определяем метод next для итератора
//       next() {
//         // Проверяем, есть ли еще элементы для итерации
//         if (currentIndex < albums.length) {
//           // Возвращаем следующий элемент и увеличиваем индекс
//           return { value: albums[currentIndex++], done: false };
//         } else {
//           // Когда все элементы пройдены, указываем, что итерация завершена
//           return { done: true };
//         }
//       },
//     };
//   },
// };

// // Используем цикл for...of для перебора альбомов в музыкальной коллекции
// for (const album of musicCollection) {
//   // Выводим каждый альбом в формате: Название альбома - Исполнитель (Год выпуска)
//   console.log(`${album.title} - ${album.artist} (${album.year})`);
// }

// Создаем объекты поваров с именами Виктор, Ольга и Дмитрий
const viktor = { name: "Виктор" };
const olga = { name: "Ольга" };
const dmitry = { name: "Дмитрий" };

// Создаем Map для хранения блюд и их поваров
const dishesAndChiefs = new Map([
  ["Пицца Маргарита", viktor], // Пицца Маргарита готовится Виктором
  ["Пицца Пепперони", viktor], // Пицца Пепперони готовится Виктором
  ["Суши Филадельфия", olga], // Суши Филадельфия готовятся Ольгой
  ["Суши Калифорния", olga], // Суши Калифорния готовятся Ольгой
  ["Тирамису", dmitry], // Тирамису готовится Дмитрием
  ["Чизкейк", dmitry], // Чизкейк готовится Дмитрием
]);

// Создаем объекты клиентов с именами Алексей, Мария и Ирина
const alexey = { name: "Алексей" };
const maria = { name: "Мария" };
const irina = { name: "Ирина" };

// Создаем Map для хранения заказов клиентов
const customerOrders = new Map([
  [alexey, ["Пицца Пепперони", "Тирамису"]], // Алексей заказал Пиццу Пепперони и Тирамису
  [maria, ["Суши Калифорния", "Пицца Маргарита"]], // Мария заказала Суши Калифорния и Пиццу Маргарита
  [irina, ["Чизкейк"]], // Ирина заказала Чизкейк
]);

// Функция для получения имени повара, который готовит данное блюдо
function getChiefForDish(dish) {
  return dishesAndChiefs.get(dish).name; // Возвращаем имя повара по названию блюда
}

// Функция для отображения заказов клиента
function displayCustomerOrders(customer) {
  const orders = customerOrders.get(customer); // Получаем список заказов клиента
  console.log(`Заказы клиента ${customer.name}:`); // Выводим имя клиента
  orders.forEach((dish) => {
    console.log(`Блюдо: ${dish}, Повар: ${getChiefForDish(dish)}`); // Выводим каждое блюдо и имя повара, который его готовит
  });
}

// Выводим заказы для каждого клиента
displayCustomerOrders(alexey); // Выводим заказы Алексея
displayCustomerOrders(maria); // Выводим заказы Марии
displayCustomerOrders(irina); // Выводим заказы Ирины
